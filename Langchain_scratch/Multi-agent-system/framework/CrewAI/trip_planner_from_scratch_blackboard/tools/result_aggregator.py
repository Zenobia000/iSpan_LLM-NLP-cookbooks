"""
結果聚合器 - 用於處理和合併多個代理的輸出
"""
from typing import Dict, Any, List
import json
from datetime import datetime

class ResultAggregator:
    """結果聚合器，用於處理和合併多個代理的輸出"""
    
    def __init__(self):
        self.results: Dict[str, Any] = {}
        self.metadata: Dict[str, Dict] = {}
    
    def add_result(self, key: str, value: Any, agent_id: str, 
                  timestamp: str = None) -> None:
        """
        添加一個結果
        
        Args:
            key: 結果的鍵名
            value: 結果值
            agent_id: 產生結果的代理ID
            timestamp: 時間戳（可選）
        """
        if timestamp is None:
            timestamp = datetime.now().isoformat()
            
        self.results[key] = value
        self.metadata[key] = {
            'agent_id': agent_id,
            'timestamp': timestamp
        }
    
    def get_result(self, key: str) -> Any:
        """獲取特定結果"""
        return self.results.get(key)
    
    def get_all_results(self) -> Dict[str, Any]:
        """獲取所有結果"""
        return self.results.copy()
    
    def merge_results(self, format_type: str = 'json') -> str:
        """
        合併所有結果為指定格式
        
        Args:
            format_type: 輸出格式（'json' 或 'text'）
        """
        if format_type == 'json':
            return json.dumps({
                'results': self.results,
                'metadata': self.metadata
            }, ensure_ascii=False, indent=2)
        
        # 文本格式輸出
        output = []
        for key, value in self.results.items():
            metadata = self.metadata[key]
            output.append(f"=== {key} ===")
            output.append(f"Generated by: {metadata['agent_id']}")
            output.append(f"Time: {metadata['timestamp']}")
            output.append(str(value))
            output.append("")  # 空行分隔
        
        return "\n".join(output)
    
    def clear(self) -> None:
        """清空所有結果"""
        self.results.clear()
        self.metadata.clear() 